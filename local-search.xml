<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>__proto__与prototype</title>
    <link href="/2020/04/29/proto-%E4%B8%8Eprototype/"/>
    <url>/2020/04/29/proto-%E4%B8%8Eprototype/</url>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong><strong>proto</strong></strong><br>对象有属性<strong>proto</strong>,<strong>proto</strong>指向的是该对象的构造函数的原型对象</p><p><strong>prototype</strong><br>方法有<strong>proto</strong>,还有prototype，prototype指向的是该方法的原型对象</p><p><strong>有关原型的一些方法</strong></p><p><strong>setprototype(a,b)</strong> 将a的prototype指向b的prototype<br><strong>a instanceof b</strong> 判断 a 对象是否在b的原型链上存在一个构造函数的prototype属性，返回boolean值<br><strong>a.isprototypeof(b)</strong> 判断a的对象是否在b的原型链上， 简单理解为 a是b的父级吗？ a对象是否是b的祖先中的一员? 返回Boolean值</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Json的初认识</title>
    <link href="/2020/04/29/Json%E7%9A%84%E5%88%9D%E8%AE%A4%E8%AF%86/"/>
    <url>/2020/04/29/Json%E7%9A%84%E5%88%9D%E8%AE%A4%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是json"><a href="#什么是json" class="headerlink" title="什么是json"></a>什么是json</h1><p><strong>json是一个轻量级的数据交换格式，便于他人阅读和编写</strong><br>当前后端进行数据传输时，往往数据格式是不一样的，这会很容易导致错误发生，所以需要一种将数据变成双方都能识别的格式，这就是json格式</p><h1 id="json的使用"><a href="#json的使用" class="headerlink" title="json的使用"></a>json的使用</h1><p>1、<strong>**stringify(x,y,z)</strong></p><p>将变成字符串形式，一般用来向其他语言传输使用,第一个参数选择转换目标，第二个参数指定需要保存的属性，第三个参数是空格个数（常规为<br>2）<strong>JSON.parse()</strong></p><p>反解析，将字符串json解析成object。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作用域与闭包</title>
    <link href="/2020/04/25/%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85/"/>
    <url>/2020/04/25/%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p><strong>作用域</strong>也称环境，理解为不同区域只能在特定区域产生作用。</p><blockquote><p>全局作用域只有一个，每个函数也都有作用域。</p></blockquote><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>闭包指子函数可以访问外部其他作用域中的数据，</p><ul><li>js所有函数都是闭包</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组的几个重要方法</title>
    <link href="/2020/04/21/%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E6%96%B9%E6%B3%95/"/>
    <url>/2020/04/21/%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h1><p> <code>forEa</code>使函数作用在每个数组元素上，但是没有返回值。</p><p> 例子：//给每个人添加一个函数，返回一个班级属性</p><pre><code>    let arr = [        {name:&#39;xiaoming&#39;,grade:99},        {name:&#39;xiaohei&#39;,grade:89},        {name:&#39;xiaolong&#39;,grade:59}    ];    arr.forEach(function(item,index,array){        return item[&#39;class&#39;] = &#39;一年级一班&#39;;    }) </code></pre><h1 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h1><p><code>filter</code>使用 filter 可以过滤数据中元素.</p><p>例子： //找出calss = 一班的同学</p><pre><code>    let arr = [        {name:&#39;xiaoming&#39;,grade:99,class=&#39;一班&#39;},        {name:&#39;xiaohei&#39;,grade:89}，class=&#39;二班&#39;,        {name:&#39;xiaolong&#39;,grade:59,class = &#39;一班&#39;}    ];let cssLessons = lessons.filter(function (item, index, array) {  if (item.class == &#39;一班&#39;) {    return true;  }});</code></pre><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>使用 <code>map</code> 映射可以在数组的所有元素上应用函数，用于映射出新的值</p><p>例子：//获取一个新数组，并且包含旧数组的一些属性</p><pre><code>let lessons = [  {title: &#39;媒体查询响应式布局&#39;,category: &#39;css&#39;},  {title: &#39;FLEX 弹性盒模型&#39;,category: &#39;css&#39;},  {title: &#39;MYSQL多表查询随意操作&#39;,category: &#39;mysql&#39;}];console.log(lessons.map(function(item){    return item.title});</code></pre><h1 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h1><p>使用 <code>reduce</code> 函数可以从前面开始迭代数组的所有元素</p><table><thead><tr><th>参数</th><th>说明</th><th></th></tr></thead><tbody><tr><td>pre</td><td>调用上次返回的结果（首次则为0）</td><td></td></tr><tr><td>cur</td><td>当前元素值</td><td></td></tr><tr><td>index</td><td>当前索引</td><td></td></tr><tr><td>array</td><td>原数组</td><td></td></tr></tbody></table><pre><code>function countNumber(arry,item){    return arry.reduce(function(pre,cur){        return pre+= cur == item ? 1:0    },0)}let arr = [1,2,3,4,5,62,1,1,1]console.log(countNumber(arr,1));//统计arr里的1的数量</code></pre><p>例子：//找出最大值</p><pre><code>function arrMax(array){    return array.reduce(function(max,cur){        return max &gt; cur ? max:cur     },[])}let arr = [1,2,3,4,5,62,1,1,1]console.log(arrMax(arr));</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>及时总结发现问题，打好数组基础很关键，以后工作中会出现大量操作数组的实战项目。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人性的弱点</title>
    <link href="/2020/04/21/%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9/"/>
    <url>/2020/04/21/%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="一、不要批评指责他人"><a href="#一、不要批评指责他人" class="headerlink" title="一、不要批评指责他人"></a>一、不要批评指责他人</h2><p><strong>其实我觉得说的很对，在我们日常生活中，往往会因为一些小事而去指责批评他人，则其中的原因只是为了证明自己的观点正确，然后呢？ 对方并不会因为你指责他应该怎么做而感谢你，往往只会更加愤怒，请不要随意批评他人！</strong></p><h2 id="二、多赞美他人"><a href="#二、多赞美他人" class="headerlink" title="二、多赞美他人"></a>二、多赞美他人</h2><p><strong>请不要吝啬你的赞美，每人的内心都渴望被他人称赞，想象你一大早出门，别人便夸奖你今天看起来很精神，你会不会因此一整天都带着笑容且充满自信的度过?</strong></p><h2 id="三、站在对方的立场上考虑事情"><a href="#三、站在对方的立场上考虑事情" class="headerlink" title="三、站在对方的立场上考虑事情"></a>三、站在对方的立场上考虑事情</h2><p><strong>当我们发现与对方观点不合时，请先不要发表意见看法，请先站在对方的角度考虑，为什么对方这么做？思考完后在站在对方的角度和对方讨论，这会让对方对你颇有好感，且不会发生不愉快的事情</strong></p><h2 id="四、发自内心的为他人着想"><a href="#四、发自内心的为他人着想" class="headerlink" title="四、发自内心的为他人着想"></a>四、发自内心的为他人着想</h2><p><strong>让生活多一些爱，多点关心他人，记住对方的一些小事情或者微不足道的瞬间，也许未来会发生什么呢？当一个许久未见的朋友发现你还记得他名字，当一个好友生日时你送了他当时发朋友圈提到的一个喜欢的玩偶，这都是特别暖心的事情</strong></p><h2 id="五、比起倾诉者，请多做倾听者"><a href="#五、比起倾诉者，请多做倾听者" class="headerlink" title="五、比起倾诉者，请多做倾听者"></a>五、比起倾诉者，请多做倾听者</h2><p><strong>扮演好一个倾听者往往能给你带来更多益处，别人也很乐意与你交心谈心</strong></p><h2 id="六、谈论对方的兴趣爱好"><a href="#六、谈论对方的兴趣爱好" class="headerlink" title="六、谈论对方的兴趣爱好"></a>六、谈论对方的兴趣爱好</h2><p><strong>当与对方交谈时，请主动提及对方的兴趣爱好，并且表现出感兴趣的样子，对方则会很乐意的与你交谈，此时能激发对方一种为他人普及知识的快感，这很重要</strong></p><h2 id="七、主动承认错误"><a href="#七、主动承认错误" class="headerlink" title="七、主动承认错误"></a>七、主动承认错误</h2><p><strong>当自己做错了一些错误，或是自己的一些举动间接导致错误发生，请主动承认错误，不要找诸多借口为自己辩护，这样只会让别人觉得你是一个喜欢逃避的人，请先给对方一个诚挚的道歉，并且表现的十分诚恳，以及下次再也不会犯的决心</strong></p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
      <category>人性的弱点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>symbol的简单认识</title>
    <link href="/2020/04/16/%E5%AF%B9symbol%E7%9A%84%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%86/"/>
    <url>/2020/04/16/%E5%AF%B9symbol%E7%9A%84%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Symbol是Es6中引入的新的数据类型（原有：number、string、null、undeifend、boolean、boject）</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>理解为一种标识唯一性的id，可用于区分名字相同的不同对象。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><pre><code> let user = symbol() //给user添加唯一的symbol </code></pre><p>当然，symbol()函数是一个可传参的函数，symbol(‘用来描述你的symbol以达到区分的作用’)</p><pre><code> user1 = symbol(&#39;user1&#39;) </code></pre><p>值得一提的是此时判断并不相等，证明了symbol的唯一性</p><pre><code>  let user1 = symbol(&#39;user&#39;)  let user2 = symbol(&#39;user&#39;)  alert(user1 == user) //false</code></pre><p>下面介绍另一种创建symbol的方法，这个方法与上面的有所不同，它并不是直接创建一个symbol，而是先在内存中判断是否存在相同的symbol，如存在直接赋值</p><pre><code>let user1 = symbol.for(&#39;key&#39;)let user2 = symbol.for(&#39;key&#39;)alert(user1 == user2) //ture</code></pre><p>当我想取得symbol的名字时（只能取得以for方式定义的symbol值）</p><pre><code>let a = symbol.Forkey(&#39;user1&#39;)//key</code></pre><p>下面位实战环节，若我有2个对象且名字相同，但属性不同，如何利用symbol表示不同的对象？</p><pre><code>let user1{    name:&#39;hyq&#39;,    key : symbol()};let user2{    name : &#39;hyq&#39;,    key ；symbol()};let user = {    [user1.key]:{        math : 100,        English : 100    },    [user2.key]:{        math : 10,        English : 10    }}console.log(user[user1.key]) //打印user1的分数。</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Symbol是Es6中引入的新的数据类型（原有：number、string、null、undeifend、boolean、boject）<br>可以简单的把symbol想象成一个id，名字是不唯一的，但id是唯一的。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《认知天性》</title>
    <link href="/2020/04/15/%E3%80%8A%E8%AE%A4%E7%9F%A5%E5%A4%A9%E6%80%A7%E3%80%8B/"/>
    <url>/2020/04/15/%E3%80%8A%E8%AE%A4%E7%9F%A5%E5%A4%A9%E6%80%A7%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/img/%E8%AE%A4%E7%9F%A5%E5%A4%A9%E6%80%A7.jpg" srcset="/img/loading.gif" alt=""><br><strong>1.避免反复阅读，这样只能产生短暂记忆，大脑欺骗自己已经记住，其实往往并没有形成深度记忆</strong><br><strong>2.不断检索知识，将自己学会的知识分块分区，要将新的知识和旧的知识串联起来，这样不容易忘记，且更有效率</strong><br><strong>3.进行主动学习，主动检测自己的知识储备，最好能够在一张白纸上将自己所学的知识的重点难点写下来，发现存在记忆模糊的地方便是没有扎实掌握的知识</strong><br><strong>4.不断进行练习，反复练习 重复练习 形成属于自己的一套方法，这样才能逐渐体会到知识的正面反馈。</strong><br><strong>5.每间隔一段时期，主动进行回想，加强记忆，避免随着时间的流逝忘记了以往所学习的内容</strong></p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
      <category>认知天性</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《如何成为一个很厉害的人》</title>
    <link href="/2020/04/14/%E3%80%8A%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%BE%88%E5%8E%89%E5%AE%B3%E7%9A%84%E4%BA%BA%E3%80%8B/"/>
    <url>/2020/04/14/%E3%80%8A%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%BE%88%E5%8E%89%E5%AE%B3%E7%9A%84%E4%BA%BA%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/img/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%BE%88%E5%8E%89%E5%AE%B3%E7%9A%84%E4%BA%BA.png" srcset="/img/loading.gif" alt=""><br><strong>一、既要享受当下，也要着眼未来</strong><br>不要过度约束自己，给自己施加太大的压力，想着完成了一个大的目标后才能放松，其实往往会适得其反，过分给自己施压会产生不好的后果。<br><strong>二、不断制定目标，指定好计划与发展道路</strong><br>制定好一个目标（不要害怕目标过大无法完成）每5年一个大阶段，可以将5年目标分解为1年1年的目标，将每年的目标分为季度目标，以此类推可分为每月目标，每周目标，每日目标，这样下来你会发现其实并不是那么的遥不可及。</p><p>选择时间收益比高的目标，且半衰期长的，简而言之 花费少的时间完成对你未来帮助大的目标，且随着时间流逝不会消失的太快。<br><strong>三、将生活与时间分层</strong><br>学习时：高强度下学习，快速思考。<br>生活时：放慢脚步，享受生活，追求生活品质。<br>切记！不可搞混，否则生活将会十分劳累，亲身经历</p><p><strong>四、选择适合自己的</strong><br>最好的不一定适合你，每个人心中早已有了一个属于自己的最好，不要人云亦云，对事情要有自己独特的见解和判断。</p><p><strong>五、当存在多个目标时感到困惑</strong><br>当存在多个目标时，要懂得取舍，明白哪个目标对目前的你作用和可行性最大，当你决定了最重要的目标时，就竭尽全力去完成，但并不是让你放弃别的目标，以下有三个方法：<br><strong>①目标悬置：并不放弃，只是延迟实现。</strong><br><strong>②能力嫁接：找到目标与目标之间必备能力的关联点，这样可以提高成功率与效率</strong><br><strong>③特性改造：将你的目标当作你的爱好一样去完成它，找到目标有趣的地方，这会使你更容易的坚持下去</strong></p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
      <category>如何成为一个很厉害的人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>let与var的区别</title>
    <link href="/2020/04/13/let%E4%B8%8Evar%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/04/13/let%E4%B8%8Evar%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="与-var与-let、const的区别"><a href="#与-var与-let、const的区别" class="headerlink" title="与 var与 let、const的区别"></a>与 <code>var</code>与 <code>let</code>、<code>const</code>的区别</h1><p><img src="/img/let.png" srcset="/img/loading.gif" alt=""><br><code>var</code> 与 <code>let</code>、<code>const（常量）</code> 都属于声明变量，先单独比较<code>var</code>与<code>let</code>的区别，<br>相比<code>let</code>来说，<code>var</code>属于非常古老的语法 它存在许多的缺陷<br><code>var</code>：<strong>①存在函数作用域和全局作用域</strong> <strong>②提升声明但不提升赋值变量</strong><br>       ```</p><pre><code>    function sayHi() {    alert(phrase);    var phrase = &quot;Hello&quot;;    }    sayHi(); //并不报错，打印：undefined   ```</code></pre><p><code>let</code>:拥有块级作用域<br><code>const</code>:定义常量，常量：不可更改的变量，常用大写字母命名，可以用在定义颜色，这样即可不记住十六进制颜色还不容易出错，是个很好的点子。</p><h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><p>我觉得var的出现就是个错误。。。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据类型</title>
    <link href="/2020/04/13/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2020/04/13/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型学习总结"><a href="#数据类型学习总结" class="headerlink" title="数据类型学习总结"></a>数据类型学习总结</h1><p>基本的八种数据类型<br>其中常见：<br><strong>Number</strong>：number 类型代表整数和浮点数<br><strong>string</strong>：字符串<br><strong>boolean</strong>：boolean 类型仅包含两个值：true 和 false。<br><strong>null</strong>：表示值为’空’’未知’<br><strong>undenfined</strong>：未被赋值<br><strong>BigInt</strong>： 类型是最近被添加到 JavaScript 语言中的，用于表示任意长度的整数。<br><strong>symbol</strong>：symbol 类型用于创建对象的唯一标识符（后面补充）</p><p>特殊：<br><strong>object</strong>：object 类型是一个特殊的类型（后面补充）</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/04/10/hello-world/"/>
    <url>/2020/04/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
