<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>symbol的简单认识</title>
    <link href="/2020/04/16/%E5%AF%B9symbol%E7%9A%84%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%86/"/>
    <url>/2020/04/16/%E5%AF%B9symbol%E7%9A%84%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Symbol是Es6中引入的新的数据类型（原有：number、string、null、undeifend、boolean、boject）</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>理解为一种标识唯一性的id，可用于区分名字相同的不同对象。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><pre><code> let user = symbol() //给user添加唯一的symbol </code></pre><p>当然，symbol()函数是一个可传参的函数，symbol(‘用来描述你的symbol以达到区分的作用’)</p><pre><code> user1 = symbol(&#39;user1&#39;) </code></pre><p>值得一提的是此时判断并不相等，证明了symbol的唯一性</p><pre><code>  let user1 = symbol(&#39;user&#39;)  let user2 = symbol(&#39;user&#39;)  alert(user1 == user) //false</code></pre><p>下面介绍另一种创建symbol的方法，这个方法与上面的有所不同，它并不是直接创建一个symbol，而是先在内存中判断是否存在相同的symbol，如存在直接赋值</p><pre><code>let user1 = symbol.for(&#39;key&#39;)let user2 = symbol.for(&#39;key&#39;)alert(user1 == user2) //ture</code></pre><p>当我想取得symbol的名字时（只能取得以for方式定义的symbol值）</p><pre><code>let a = symbol.Forkey(&#39;user1&#39;)//key</code></pre><p>下面位实战环节，若我有2个对象且名字相同，但属性不同，如何利用symbol表示不同的对象？</p><pre><code>let user1{    name:&#39;hyq&#39;,    key : symbol()};let user2{    name : &#39;hyq&#39;,    key ；symbol()};let user = {    [user1.key]:{        math : 100,        English : 100    },    [user2.key]:{        math : 10,        English : 10    }}console.log(user[user1.key]) //打印user1的分数。</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Symbol是Es6中引入的新的数据类型（原有：number、string、null、undeifend、boolean、boject）<br>可以简单的把symbol想象成一个id，名字是不唯一的，但id是唯一的。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《认知天性》</title>
    <link href="/2020/04/15/%E3%80%8A%E8%AE%A4%E7%9F%A5%E5%A4%A9%E6%80%A7%E3%80%8B/"/>
    <url>/2020/04/15/%E3%80%8A%E8%AE%A4%E7%9F%A5%E5%A4%A9%E6%80%A7%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/img/%E8%AE%A4%E7%9F%A5%E5%A4%A9%E6%80%A7.jpg" srcset="/img/loading.gif" alt=""><br><strong>1.避免反复阅读，这样只能产生短暂记忆，大脑欺骗自己已经记住，其实往往并没有形成深度记忆</strong><br><strong>2.不断检索知识，将自己学会的知识分块分区，要将新的知识和旧的知识串联起来，这样不容易忘记，且更有效率</strong><br><strong>3.进行主动学习，主动检测自己的知识储备，最好能够在一张白纸上将自己所学的知识的重点难点写下来，发现存在记忆模糊的地方便是没有扎实掌握的知识</strong><br><strong>4.不断进行练习，反复练习 重复练习 形成属于自己的一套方法，这样才能逐渐体会到知识的正面反馈。</strong><br><strong>5.每间隔一段时期，主动进行回想，加强记忆，避免随着时间的流逝忘记了以往所学习的内容</strong></p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
      <category>认知天性</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《如何成为一个很厉害的人》</title>
    <link href="/2020/04/14/%E3%80%8A%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%BE%88%E5%8E%89%E5%AE%B3%E7%9A%84%E4%BA%BA%E3%80%8B/"/>
    <url>/2020/04/14/%E3%80%8A%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%BE%88%E5%8E%89%E5%AE%B3%E7%9A%84%E4%BA%BA%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/img/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%BE%88%E5%8E%89%E5%AE%B3%E7%9A%84%E4%BA%BA.png" srcset="/img/loading.gif" alt=""><br><strong>一、既要享受当下，也要着眼未来</strong><br>不要过度约束自己，给自己施加太大的压力，想着完成了一个大的目标后才能放松，其实往往会适得其反，过分给自己施压会产生不好的后果。<br><strong>二、不断制定目标，指定好计划与发展道路</strong><br>制定好一个目标（不要害怕目标过大无法完成）每5年一个大阶段，可以将5年目标分解为1年1年的目标，将每年的目标分为季度目标，以此类推可分为每月目标，每周目标，每日目标，这样下来你会发现其实并不是那么的遥不可及。</p><p>选择时间收益比高的目标，且半衰期长的，简而言之 花费少的时间完成对你未来帮助大的目标，且随着时间流逝不会消失的太快。<br><strong>三、将生活与时间分层</strong><br>学习时：高强度下学习，快速思考。<br>生活时：放慢脚步，享受生活，追求生活品质。<br>切记！不可搞混，否则生活将会十分劳累，亲身经历</p><p><strong>四、选择适合自己的</strong><br>最好的不一定适合你，每个人心中早已有了一个属于自己的最好，不要人云亦云，对事情要有自己独特的见解和判断。</p><p><strong>五、当存在多个目标时感到困惑</strong><br>当存在多个目标时，要懂得取舍，明白哪个目标对目前的你作用和可行性最大，当你决定了最重要的目标时，就竭尽全力去完成，但并不是让你放弃别的目标，以下有三个方法：<br><strong>①目标悬置：并不放弃，只是延迟实现。</strong><br><strong>②能力嫁接：找到目标与目标之间必备能力的关联点，这样可以提高成功率与效率</strong><br><strong>③特性改造：将你的目标当作你的爱好一样去完成它，找到目标有趣的地方，这会使你更容易的坚持下去</strong></p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
      <category>如何成为一个很厉害的人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>let与var的区别</title>
    <link href="/2020/04/13/let%E4%B8%8Evar%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/04/13/let%E4%B8%8Evar%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="与-var与-let、const的区别"><a href="#与-var与-let、const的区别" class="headerlink" title="与 var与 let、const的区别"></a>与 <code>var</code>与 <code>let</code>、<code>const</code>的区别</h1><p><img src="/img/let.png" srcset="/img/loading.gif" alt=""><br><code>var</code> 与 <code>let</code>、<code>const（常量）</code> 都属于声明变量，先单独比较<code>var</code>与<code>let</code>的区别，<br>相比<code>let</code>来说，<code>var</code>属于非常古老的语法 它存在许多的缺陷<br><code>var</code>：<strong>①存在函数作用域和全局作用域</strong> <strong>②提升声明但不提升赋值变量</strong><br>       ```</p><pre><code>    function sayHi() {    alert(phrase);    var phrase = &quot;Hello&quot;;    }    sayHi(); //并不报错，打印：undefined   ```</code></pre><p><code>let</code>:拥有块级作用域<br><code>const</code>:定义常量，常量：不可更改的变量，常用大写字母命名，可以用在定义颜色，这样即可不记住十六进制颜色还不容易出错，是个很好的点子。</p><h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><p>我觉得var的出现就是个错误。。。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据类型</title>
    <link href="/2020/04/13/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2020/04/13/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型学习总结"><a href="#数据类型学习总结" class="headerlink" title="数据类型学习总结"></a>数据类型学习总结</h1><p>基本的八种数据类型<br>其中常见：<br><strong>Number</strong>：number 类型代表整数和浮点数<br><strong>string</strong>：字符串<br><strong>boolean</strong>：boolean 类型仅包含两个值：true 和 false。<br><strong>null</strong>：表示值为’空’’未知’<br><strong>undenfined</strong>：未被赋值<br><strong>BigInt</strong>： 类型是最近被添加到 JavaScript 语言中的，用于表示任意长度的整数。<br><strong>symbol</strong>：symbol 类型用于创建对象的唯一标识符（后面补充）</p><p>特殊：<br><strong>object</strong>：object 类型是一个特殊的类型（后面补充）</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/04/10/hello-world/"/>
    <url>/2020/04/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
